use('mongorestaurants');

//1. Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants.
db.restaurants.find({});

//2. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{restaurant_id:1, name:1, borough:1, cuisine:1});

//3. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però exclou el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1});

//4. Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però exclou el camp _id per tots els documents en la col·lecció Restaurants.
db.restaurants.find({},{_id:0, restaurant_id:1, name:1, borough:1, "address.zipcode":1});

//5. Escriu una consulta per mostrar tots els restaurants que estan en el Bronx.
db.restaurants.find({borough: "Bronx"});
/*
 (A) find({borough: "Bronx"}) vs. (B) find({},{borough: "Bronx"}) 
    -> (A) returns all the documents that match the given filter(i.e. {borough:"Bronx"}).
    -> (B) returns all the documents that match the filter only displaying the specified fields.
*/
//6. Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx.
db.restaurants.find({borough: "Bronx"}).limit(5);

//7. Escriu una consulta per mostrar el pròxim 5 restaurants després de saltar els primers 5 del Bronx.
db.restaurants.find({borough: "Bronx"}).skip(5).limit(5);

//8. Escriu una consulta per trobar els restaurants que tenen un score de més de 90.
db.restaurants.find({grades:{$elemMatch: {score: {$gt: 90}}}});

//9. Escriu una consulta per trobar els restaurants que tenen un score de més de 80 però menys que 100.
db.restaurants.find({address.coord: {$lt: -95.754168}});

//10. Escriu una consulta per trobar els restaurants que es localitzen en valor de latitud menys de -95.754168.
db.restaurants.find({address.coord: {$lt: -95.754168}});

//11. Escriu una consulta de MongoDB per a trobar els restaurants que no preparen cuisine de tipus 'American' i el seu puntatge de qualificació és superior a 70 i latitud inferior a -65.754168.
db.restaurants.find({$and: [{cuisine: {$ne :"American "}}, {grades.score: {$gt: 70}}, {address.coord : {$lt: -65.754168}}]});
//NB: $ne -> not equal

//12. Escriu una consulta per trobar els restaurants que no preparen cap cuisine de 'American' i va aconseguir un marcador més que 70 i localitzat en la longitud menys que -65.754168. Nota : Fes aquesta consulta sense utilitzar $and operador.
db.restaurants.find({cuisine: {$ne: "American "}, grades.score: {$gt: 70}, address.coord: {$lt : -65.754168} });

//13. Escriu una consulta per trobar els restaurants que no preparen cap cuisine de 'American ' i va aconseguir un punt de grau 'A' no pertany a Brooklyn. S'ha de mostrar el document segons la cuisine en ordre descendent.
db.restaurants.find({cuisine: {$ne: "American "}, grades.grade :"A", borough: {$ne: "Brooklyn"}}).sort({"cuisine": -1});

//14. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants quin contenir 'Wil' com les tres primeres lletres en el seu nom.
db.restaurants.find({name: {$regex: /^Wil/}}, {restaurant_id: 1, name: 1, cuisine: 1});

//15. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants quin contenir 'ces' com les últim tres lletres en el seu nom.
db.restaurants.find({name: {$regex: /ces$/}}, {restaurant_id: 1, name: 1, cuisine: 1});

//16. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants quin contenir 'Reg' com tres lletres en algun lloc en el seu nom.
db.restaurants.find({name: {$regex: /Reg/i}}, {restaurant_id: 1, name: 1, cuisine: 1});

//17. Escriu una consulta per trobar els restaurants que pertanyen al Bronx i preparen qualsevol plat American o xinès.
db.restaurants.find({borough: "Bronx" , $or: [{cuisine: "American "}, {cuisine: "Chinese"}]}); 

//18. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que pertanyen a Staten Island o Queens o Bronx  Brooklyn.
db.restaurants.find({borough: {$in: ["Staten Island","Queens","Bronx","Brooklyn"]}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});

//19. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que no pertanyen a Staten Island o Queens o Bronx o Brooklyn.
db.restaurants.find({borough :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});

//20. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que aconsegueixin un marcador que no és més que 10.
db.restaurants.find({grades.score: {$not {$lte: 10}}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1});

//21. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que preparen peix excepte 'American' i 'Chinese' o el name del restaurant comença amb lletres 'Wil'.
db.restaurants.find({$and: [{ cuisine: {$ne: "American "}}, {cuisine: {$ne: "Chinese"}}, {$or: [{cuisine: {$regex: /fish/i}}, {name: {$regex: /^Wil/i}}]} ] }, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1 });

//22. Escriu una consulta per trobar el restaurant_id, name, i grades per a aquells restaurants que aconsegueixin un grade de "A" i un score de 11 en dates d'estudi ISODate "2014-08-11T00:00:00Z".
db.restaurants.find({ grades: {$elemMatch: { date: ISODate("2014-08-11T00:00:00Z"), grade: "A", score: 11 }}}, {restaurant_id: 1, name: 1, grades: 1});
/*NB: $elemmatch 
-> limits the contents of an <array> field from the query results to contain only the first element matching the $elemMatch condition.limits the contents of an <array> field from the query results to contain only the first element matching the $elemMatch condition.//NB: $elemMatch ->  limits the contents of an <array> field from the query results to contain only the first element matching the $elemMatch condition.
-> when writing the query, the order of fields in the array must be the same as in each doc of the collection.
*/
//23.Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants on el 2n element de varietat de graus conté un grau de "A" i marcador 9 sobre un ISODate "2014-08-11T00:00:00Z".
db.restaurants.find({grades: {elemMatch: {date: ISODate("2014-08-11T00:00:00Z"), grade: "A", score: 9 }}}, { restaurant_id: 1, name: 1, grades: 1 });

//24. Escriu una consulta per trobar el restaurant_id, name, adreça i ubicació geogràfica per a aquells restaurants on el segon element del array coord conté un valor quin és més que 42 i fins a 52.
db.restaurants.find({address.coord: {$gt : 42, $lte : 52}}, {restaurant_id: 1, name: 1, address: 1});

//25. Escriu una consulta per organitzar el nom dels restaurants en ordre ascendent juntament amb totes les columnes.
db.restaurants.find().sort({name: 1});

//26. Escriu una consulta per organitzar el nom dels restaurants en descendir juntament amb totes les columnes.
db.restaurants.find().sort({name: -1});

//27. Escriu una consulta a organitzar el nom de la cuisine en ordre ascendent i per el mateix barri de cuisine. Ordre descendent.
db.restaurants.find().sort({cuisine: 1, borough: -1});

//28. Escriu una consulta per saber tant si totes les direccions contenen el carrer o no.
db.restaurants.find({address.street: {$ne: null}});
    //*NB: returns docs where the field has a non-null value.
db.restaurants.find({address.street : {$exists: true}});
    //*NB: returns no docs, meaning all docs contain the subfield street.

//29. Escriu una consulta quin seleccionarà tots el documents en la col·lecció de restaurants on els valors del camp coord és Double.
db.restaurants.find({address.coord: {$type: "double"}});

//30. Escriu una consulta que seleccionarà el restaurant_id, name i grade per a aquells restaurants que retornen 0 com a residu després de dividir algun dels seus score per 7.
db.restaurants.find({grades.score: {$mod: [7, 0]}}, {restaurant_id: 1, name: 1, grades: 1});
//*NB -> { field: { $mod: [ divisor, remainder ] } }

//31. Escriu una consulta per trobar el name de restaurant, borough, longitud i altitud i cuisine per a aquells restaurants que contenen 'mon' com tres lletres en algun lloc del seu name.
db.restaurants.find({name: {$regex: /mon/i}}, {name: 1, borough: 1, address.coord: 1, cuisine: 1});

//32. Escriu una consulta per trobar el name de restaurant, borough, longitud i latitud i cuisine per a aquells restaurants que conteinen 'Mad' com primeres tres lletres del seu name.
db.restaurants.find({name: {$regex: /^Mad/i}}, {name: 1, borough: 1, address.coord: 1, cuisine: 1});


/* NOTES:

=> THE FIND() METHOD
 
 The find() method is used to select documents in a collection and return a cursor to the selected documents.

    I. Syntax
    -> Takes two parameters, both optional. 
        For ex: 
            db.my_collection.find(query, projection);

        1. query/filter/selection_criteria: specifies selection filter using query operators. 
            *NB: To return all documents in a collection, 
                - omit this parameter: db.my_collection.find()
                OR:
                -  pass an empty document ({}): db.my_collection.find({})
              

        2. projection:  specifies the fields to return in the documents that match the selection criteria. 
            *NB: To return all fields in the matching documents, remove this parameter. 

    -> Projections.

            { field1: <value1>, field2: <value2> ... }
            Here if the value of the field is:

            - 1/true -> it specifies the inclusion of the field, 
            - 0/false  -> it specifies the exclusion of the field.

=> $REGEX

    I. Syntax. We have several options:

    1. { <field>: { $regex: /pattern/, $options: '<options>' } }
    2. { <field>: { $regex: 'pattern', $options: '<options>' } }
    3. { <field>: { $regex: /pattern/<options> } }

Examples: 
db.restaurants.find({name: {$regex: /^Mad/, $options: 'i'}}, {name: 1, borough: 1, address.coord: 1, cuisine: 1});
db.restaurants.find({name: {$regex: '^Mad', $options: 'i'}}, {name: 1, borough: 1, address.coord: 1, cuisine: 1});
db.restaurants.find({name: {$regex: /^Mad/i}}, {name: 1, borough: 1, address.coord: 1, cuisine: 1});


    II. $options

    - i:  case insensitivity: matches both lower and upper-case patterns in the string. 
    - m:  includes ^ and $ in the pattern in the match, i.e. to look specifically for ^ and $ within the string. These anchors will match at the beginning or end of the string if this option is not selected. 
    - x:  indicates that all white space characters in the $regex pattern should be ignored. 
    - s:  makes the dot character "." match all characters, including newline characters. 

    *NB: Not all syntax options work with '3.' -- options x & s. 
    See: https://www.mongodb.com/docs/manual/reference/operator/query/regex/

=> QUERY AND PROJECTION OPERATORS

https://www.mongodb.com/docs/manual/reference/operator/query/